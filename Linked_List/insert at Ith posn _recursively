class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
def printLL(head):
    while head is not None:
        print(str(head.data),"->",end ="")
        head = head.next
def length(head):
    count = 0
    while head:
        count+=1
        head = head.next
    return count
def insertAtI(head,i,data):
    if i<0:
        return head
    if i == 0:
        newNode = Node(data)
        newNode.next = head
        return newNode
    if head is None:           #this condition we have written here beacuse we can isert at the last posn also 
        return None
        
    smallans = insertAtI(head.next,i-1,data)
    head.next = smallans
    return head
    #head is none i ==0 chya khali lihinyach karan
# pos =3,  data = 10000

# 1 2 3  pos  =3
# 2 3    pos  =2
# 3      pos  =i-1
# None   pos = 0
# when pos == 0              data   reference
# we are creating newNode  [10000][address] 
# then newNode.next = head     10000.next = None        10000->None

# at the end 1->2->3->10000->None
# yethe  10000 newnode la return kartoy
# def insertAtI(head,i,data):
#     if i<0 or i>length(head):
#         return head
#     count=0
#     prev=None
#     curr=head
#     while count<i:
        
        
#         prev=curr
#         curr=curr.next
#         count=count+1
#     newNode=Node(data)
#     if prev is not None:
#         prev.next=newNode
#     else:
#         head=newNode
    
#     newNode.next=curr
#     return head
def takeInput():
    inputList=[int (ele) for ele in input().split()]
    head=None
    tail=None
    for currData in inputList:
        if currData==-1:
            break
        newNode=Node(currData)
        if head is None:
            head=newNode
            tail=newNode
        else:
            tail.next=newNode
            tail=newNode
    return head
head=takeInput()
printLL(head)
print()
head=insertAtI(head,3,333)
printLL(head)
