from sys import stdin , setrecursionlimit
setrecursionlimit(10**6)
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1


    return head


# To print the linked list 
def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


	
# def reverse_iteratevely(head):
#     prev = None
#     curr = head
#     while curr:
#         save_next_ofcurrbefore_deleting = curr.next
#         curr.next = prev
#         prev = curr
#         curr = save_next_ofcurrbefore_deleting
#     return 
#     # Write your code here
    

# def reverse(head):
#     if head is None:
#         return None
#     if head.next is None:
#         return head
#     newhead = head
#     if head.next:
#         newhead=reverse(head.next)
#         head.next.next = head
#     head.next = None
#     return newhead








# o(n^2) solution
# def reverse(head):
#     if head is None:
#         return head
#     if head.next is None:
#         return head
#     sh =  reverse(head.next)
#     cur = sh
#     while cur.next:
#         cur = cur.next
#     cur.next = head
#     head.next = None
#     return sh
    
 # this is o(n) solution but here we are taking the follow-up of head and tail continiously      
# def reverse(head):
#     if head is None:
#         return None,None
#     if head.next is None:
#         return head,head
#     sh,st = reverse(head.next)
#     st.next = head
#     head.next = None
#     return sh,head



# Main
t = int(stdin.readline().rstrip())

while t > 0 :

    head = takeInput()
    
    sh,st=reverse(head)
    printLinkedList(sh)

    t -= 1 

#second Part
from sys import stdin, setrecursionlimit
setrecursionlimit(10 ** 6)

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None

# def reverseLinkedListRec(head):
#     if head is None:
#         return None
#     if head.next is None:
#         return head
#     smallhead = reverseLinkedListRec(head.next)
#     tail = head
#     while tail.next:
#         tail = tail.next
#     tail.next = head
#     head.next = None
#     return smallhead
# def reverseLinkedListRec(head):
#     if head is None:
#         return None
#     if head.next is None:
#         return head
#     recalls = reverseLinkedListRec(head.next)
#     tail = head
#     while tail.next is not None:
#         tail = tail.next 
#     tail.next = head
#     head.next = None
#     return recalls

# def reverseLinkedListRec(head):
#     if head is None:
#         return None,None
#     if head.next is None:
#         return head,head
#     sh,st = reverseLinkedListRec(head.next)
#     st.next = head
#     head.next = None
#     return sh,head



















# def reverseLinkedListRecgood(head):
#     if head is None:
#         return None,None
#     if head.next is None:
#         return head,head
    
#     sh,st = reverseLinkedListRecgood(head.next)
#     st.next = head
#     head.next = None
#     return sh,head
  
# def takeInput() :
#     head = None
#     tail = None

#     datas = list(map(int, stdin.readline().rstrip().split(" ")))

#     i = 0
#     while (i < len(datas)) and (datas[i] != -1) :
#         data = datas[i]
#         newNode = Node(data)

#         if head is None :
#             head = newNode
#             tail = newNode

#         else :
#             tail.next = newNode
#             tail = newNode

#         i += 1

#     return head




# def printLinkedList(head) :

#     while head is not None :
#         print(head.data, end = " ")
#         head = head.next

#     print()


# # #main
# t = int(stdin.readline().rstrip())

# while t > 0 :
    
#     head = takeInput()

#     newHead,newtail = reverseLinkedListRecgood(head)
     
#     printLinkedList(newHead)
    

#     t -= 1 

# def reverseLinkedListRec(head) :
# 	if head is None:
# 		return None
# 	if head.next is None:
# 		return head
	
# 	smallhead=reverseLinkedListRec(head.next)
    
# 	tail=head
# 	while tail.next is not None:
# 		tail=tail.next
# 	tail.next=head
# 	head.next=None
# 	return smallhead   

# # class Node :
# #     def __init__(self, data) :
# #         self.data = data
# #         self.next = None
# def reverse_isse_achha_hani(head):
#     if head is None or head.next is None:
#         return head
    
#     smallhead = reverse_isse_achha_hani(head.next)
#     tail = head.next
#     tail.next = head
#     head.next = None
#     return smallhead
# # 
# # def reverseLinkedListRec(head) :
# #     if head is None or head.next is None:
# #         return head,head
 
# #     smallhead,smalltail = reverseLinkedListRec(head.next)
# #     smalltail.next=head
# #     head.next = None
# #     return smallhead,head
    
 
 
# def reverseLinkedListRec(head) :
# 	if head is None:
# 		return None
# 	if head.next is None:
# 		return head
	
# 	smallhead=reverseLinkedListRec(head.next)
    
# 	tail=head
# 	while tail.next is not None:
# 		tail=tail.next
# 	tail.next=head
# 	head.next=None
# 	return smallhead    """  

def reverseLinkedListBEST(head):
    if head is None:
        return None
    if head.next is None:
        return head
    smallans = reverseLinkedListBEST(head.next)
    tail = head.next
    tail.next = head
    head.next = None
    return smallans
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head




def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :
    
    head= takeInput()

    newHead= reverseLinkedListBEST(head)
    printLinkedList(newHead)

    t -= 1
