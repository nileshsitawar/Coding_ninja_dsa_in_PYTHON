
from sys import stdin

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None

def length(head):
    tail = head
    count =0
    while head:
        head = head.next
        count +=1
    return count
def appendLastNToFirst(head,n):
    len = length(head)
    if head is None:
        return None
    if n == 0:
        return head
    if n == len:
        return head
    count = len-n
    curr = head
    while count>1:
        curr = curr.next
        count -=1
    second_head = curr.next
    curr.next = None
    tail = second_head
    while tail.next:
        tail = tail.next
    tail.next = head   #if  we have made tail.next = curr then it will give error because we have process the
 #   curr in the while loo[ of count >1 so it looses its initil references so here we have to attach original head pointer 
     
    return second_head
        
        
# def length(head):
#     tail = head
#     count =0
#     while head:
#         head = head.next
#         count +=1
#     return count

# def  appendLastNToFirst(head,n) :
#     if head is None:
#         return None
#     if n == 0:  # this is  special case  when 0 elements we have to append last means we have to do nothing
#         return head
#     if n == length(head): #this is  special case   eleme here we have   1 2  3 after 1st iteration 2 3 1
#         # in secode itretion 3  1 2 and after last (3rd) iteration it will become 1 2 3
#         # to append the elements then we get out LL as it is after performing this operation
#         return head
  
#     cnt = length(head) - n
#     cur  = head
#     tail = head
#     while cnt > 1:
#         cur = cur.next
#         cnt = cnt -1
#     head2_start = cur.next
#     cur.next = None
#     tail = head2_start
#     while tail.next is not None:
#         tail  = tail.next
#     tail.next = head
#     return head2_start
        
    

# def appendLastNToFirst(head, n):
#     if head is None:
#         return None
#     if n==0:
#         return head
    
#     count = length(head) - n
#     curr=head
#     tail= head
#     while count>1:
#         curr=curr.next
#         count-=1
#     head2=curr.next
#     curr.next=None
#     tail=head2
#     while tail.next is not None :
#         tail=tail.next
        
#     tail.next=head
#     return head2
        


























#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head


#to print the linked list 
def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :

    head = takeInput()
    n = int(stdin.readline().rstrip())

    head = appendLastNToFirst(head, n)
    printLinkedList(head)

    t -= 1 
